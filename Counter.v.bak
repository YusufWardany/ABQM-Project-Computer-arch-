module counter (
  input clk, 
  input reset, 
  input in, 
  input out,
  output reg [2:0] pcount // max 7
);

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      pcount <= 3'b000; // 0
    end else if (in && (pcount < 3'b111)) begin 
      pcount <= pcount + 1; 
    end else if (out && (pcount > 3'b000)) begin
      pcount <= pcount - 1; 
    end
  end

endmodule

module counter_tb;

  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns

  // Signals
  reg clk;
  reg reset;
  reg in;
  reg out;
  wire [2:0] pcount;

  // Instantiate the module
  counter uut (
    .clk(clk),
    .reset(reset),
    .in(in),
    .out(out),
    .pcount(pcount)
  );

  // Clock generation
  always #((CLK_PERIOD / 2)) clk = ~clk;

  // Initializations
  initial begin
    clk = 0;
    reset = 1;
    in = 0;
    out = 0;
    #20; // Wait for 20 ns
    reset = 0;
    #20; // Wait for 20 ns
  end

  // Test sequence
  initial begin
    // Test case 1: Count up
    #10; // Wait for 10 ns
    in = 1;
    #30; // Wait for 30 ns
    in = 0;
    #10; // Wait for 10 ns

    // Test case 2: Count down
    out = 1;
    #30; // Wait for 30 ns
    out = 0;
    #10; // Wait for 10 ns

    // End simulation
    //$finish;
  end

endmodule


